# Copyright 2020 Google, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Deploy to Google Compute Engine

on:
  push:
    branches:
    - dev

env:
  GCE_PROJECT: ${{ secrets.GCE_PROJECT }}
  GCE_INSTANCE: ${{ secrets.INSTANCE_NAME }}
  GCE_INSTANCE_ZONE: us-west1-b # e.g. us-central1-a
  # environment variables for the build
  DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  PYDRIVE_CLIENT_ID: ${{ secrets.PYDRIVE_CLIENT_ID }}
  PYDRIVE_CLIENT_SECRET: ${{ secrets.PYDRIVE_CLIENT_SECRET }}
  # in issue #67 we considered generating
  # credentials.json in a similar fashion to config.json
  # but figured that the file was unreasonably large
  # and therefore a simple JSON string would suffice.
  # https://github.com/calpoly-csai/api/issues/67
  GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
  GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
  GOOGLE_CLOUD_NLP_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_NLP_CREDENTIALS }}
  GOOGLE_CLOUD_NLP_MODEL_NAME:  ${{ secrets.GOOGLE_CLOUD_NLP_MODEL_NAME }}
  GIT_SSH_CERT: ${{secrets.GIT_SSH_CERT}}
  PORT: ${{secrets.SSL_PORT}}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@master

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.SA_EMAIL }}
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        gcloud auth configure-docker
    # Build the Docker image
    - name: Build
      run: |
        docker build -t gcr.io/$GCE_PROJECT/$GCE_INSTANCE-image:$GITHUB_SHA \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --build-arg DATABASE_HOSTNAME \
          --build-arg DATABASE_PASSWORD \
          --build-arg DATABASE_USERNAME \
          --build-arg DATABASE_NAME \
          --build-arg PYDRIVE_CLIENT_ID \
          --build-arg PYDRIVE_CLIENT_SECRET \
          --build-arg GOOGLE_DRIVE_CREDENTIALS \
          --build-arg GOOGLE_DRIVE_FOLDER_ID \
          --build-arg GOOGLE_CLOUD_NLP_CREDENTIALS \
          --build-arg GOOGLE_CLOUD_NLP_MODEL_NAME \
          --build-arg GIT_SSH_CERT \
          --build-arg PORT .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push gcr.io/$GCE_PROJECT/$GCE_INSTANCE-image:$GITHUB_SHA
    - name: Deploy
      run: |
        gcloud compute instances update-container $GCE_INSTANCE \
          --zone $GCE_INSTANCE_ZONE \
          --container-image=gcr.io/$GCE_PROJECT/$GCE_INSTANCE-image:$GITHUB_SHA \
          --project=$GCE_PROJECT

    # if we don't run cleanup, the disk on google cloud will fill with old images.
    # run docker's prune command to cleanup old images.
    - name: Cleanup
      run: |
        gcloud compute ssh $GCE_INSTANCE --zone=$GCE_INSTANCE_ZONE --project=$GCE_PROJECT --command='docker image prune -a -f'